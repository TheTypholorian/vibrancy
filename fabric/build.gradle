plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    implementation("foundry.veil:Veil-fabric-${minecraft_version}:${veil_version}") {
        exclude group: "maven.modrinth"
        exclude group: "com.github.LlamaLad7"
    }
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

import net.fabricmc.loom.task.RemapJarTask

tasks.register("remapVeilToMojang", RemapJarTask) {
    dependsOn configurations.compileClasspath
    inputFile.set(file("libs/veil-fabric-1.20.1-1.0.0.85.jar"))
    archiveFileName.set("Veil-fabric-1.20.1-mojmap.jar")
    targetNamespace.set("official")
    addNestedDependencies.set(true)
}
